//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "pets")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub species: String,
    pub owner_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::appointments::Entity")]
    Appointments,
    #[sea_orm(
        belongs_to = "super::owners::Entity",
        from = "Column::OwnerId",
        to = "super::owners::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Owners,
}

impl Related<super::appointments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appointments.def()
    }
}

impl Related<super::owners::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Owners.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
